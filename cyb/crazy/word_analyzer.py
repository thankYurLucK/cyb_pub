import tweepy
from time import sleep
from random import randint
from collections import Counter

def most_Used_Words_Sarch_Analyzer(api:tweepy.API,logging:bool,count=1)->dict:
    """
    Searches random tweets,  
    checks for most used words in tweets,  
    returns a huge dictionary object:
    - "counter" : list of counter object (https://docs.python.org/2/library/collections.html#counter-objects)
    - "length": most used length


    logging: if logging -> prints results to file "logging.log"  
    count: uses 100 Tweets per 1 Count -> use higher count for more tweets usage  
    """



    counter_main_list=list()
    # words=list()

    length_list=list()

    try:
        for i in range(count):
            search = chr(randint(65,90))

            print("[+] Search: ",search)
            for x in api.search(search, result_type="recent", lang="en", count=100):

                tweet_word_list=x.text.split(" ")

                length_list.append(len(tweet_word_list))
                # print(counter_main_list)
                # print(range(len(tweet_word_list)))
                for word_index in range(len(tweet_word_list)):
                    word=tweet_word_list[word_index]
                    # print(word)


                    # if counter for index position already exist
                    if word_index < len(counter_main_list):
                        counter_main_list[word_index][word]+=1
                    else:
                        #add new Counter with word for array
                        counter_main_list.append(Counter([word]))
                    # print("end")

                
                    
            sleep(1)

    except KeyboardInterrupt:
        pass
    finally:

        if logging:
            print("[+] logging")
            with open("logging.log",'w') as f:
                index=0
                for counter in counter_main_list:
                    print(f"Index: {index}")

                    for k,v in counter.items():
                        try:
                            f.write("{} -> {}\n".format(k,v))
                        except UnicodeEncodeError:
                            print ("[-] cannot print",k,v)

                    index+=1

        # calculate most used length
        main_length=Counter(length_list).most_common()[0][0]

        out_object={}
        out_object["length"]=main_length
        out_object["counter"]=counter_main_list
            
        return out_object

        



def most_Used_Words_Complete_Tweet_builder(api:tweepy.API,logging=True,count=1)->str:
    """
    Returns Autogenerated message  
    WARNING: can take a lot of time and tweepy-resources

    count: uses 100 Tweets per 1 Count -> use higher count for more tweets usage  

    uses most_Used_Words_Sarch_Analyzer()

    Returns message body
    """
    msg="Autogenerated message: \n"

    results=most_Used_Words_Sarch_Analyzer(api,False,count)
    for i in range(results["length"]):
        most_used_word_for_index=results["counter"][i].most_common()[0][0]

        msg+=f" {most_used_word_for_index}"

    print(f"[+] build message: {msg}")
    return msg  
  

